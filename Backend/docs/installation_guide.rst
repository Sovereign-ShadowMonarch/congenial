System Requirements and Installation Guide
##################################################
.. toctree::
  :maxdepth: 2


Introduction
*************

The easiest way to start Rotki is to download the packaged binary for your Operating system. Linux, OSX and Windows is supported. To see how to do this go to the :ref:`next section <packaged_binaries>`.


.. _packaged_binaries:

Packaged Binaries
******************

Verifying integrity
===========================

Starting with the release of v1.6.2, rotki releases now include the sha512 sum of the packaged binaries.
You can download the file containing the hash along with the binary from the release page.

The files containing the hash have the same name as their respective binaries followed by a ``.sha512`` extension.

In order to do the verification of a binary, you have to also download the ``.sha512`` file for it.
In order to proceed with the verification on Linux and OSX, you need to open your terminal and go to the download directory.

On linux::

    cd ~/Downloads
    sha512sum -c rotki-linux_x86_64-vx.x.x.AppImage.sha512
    rotki-linux_x86_64-vx.x.x.AppImage: OK

On OSX::

    cd ~/Downloads
    shasum -a 512 -c rotki-darwin-vx.x.x.dmg.sha512
    rotki-darwin-vx.x.x.dmg: OK

If there is any problem with the checksum verification you should get an error similar to the following::

    rotki-linux_x86_64-vx.x.x.AppImage: FAILED
    sha512sum: WARNING: 1 computed checksum did NOT match

On Windows you need to first open the ``Command Prompt``. Once the command prompt is open you need to go
to the ``Download`` directory where the rotki executable and sha512 files were downloaded.::

    cd Downloads
    certutil -hashfile rotki-win32-vx.x.x.exe SHA512

After successfully running the command you should be able to see the commands output::

    SHA512 hash of rotki-win32-v1.6.2.exe:
    a3e0d79724460f642245774ba1af4c7116dfde56503d134c688f406afff5339f70a84a0bdb2556bc0785931b11e2447e3ffcd116cdec9e8a50382ec0165788b4
    CertUtil: -hashfile command completed successfully.

To verify that the generated hash matches you need to open the ``rotki-win32-vx.x.x.exe.sha512`` with ``Notepad`` or
any other text editor and make sure that the hash there matches the one generated by the certutil command.

Linux
==========

Go to the `releases <https://github.com/rotki/rotki/releases>`_ page and download the linux-x64 appimage from the `latest release <https://github.com/rotki/rotki/releases/latest>`_. Or the ``tar.xz`` file. Whichever you prefer.

If you got the appimage you have to give it the executable permission. Do :code:`chmod +x rotki-linux_x86_64-vx.x.x.AppImage` replacing the ``x`` with the proper version. And then run it.

If you got the tar, unzip it in a directory of your choice. In the root directory of the unzipped archive there is a ``rotki`` executable. Run it via the terminal to start rotki.

Troubleshooting
------------------

If you get a problem when starting the application or during its usage please open an issue in Github and include all logs that can be found in ``~/.config/rotki/logs``.

OSX
========
Homebrew
--------

``brew install --cask rotki``

Manual installation
-------------------

Go to the `releases <https://github.com/rotki/rotki/releases>`_ page and download the darwin-x64 dmg package from the `latest release <https://github.com/rotki/rotki/releases/latest>`_.

Click on the dmg installer and when prompted drag the Rotki logo to your Applications. This will install the application and once finished you can select Rotki from your applications folder and launch it.

If your OSX version does not allow you to open the application you will have to go to your OS settings and insert an exception for Rotki to let it run. `Here <https://ccm.net/faq/29619-mac-os-x-run-apps-downloaded-from-unknown-sources>`__ is a guide.

Troubleshooting
----------------

If you get a problem when starting the application or during its usage please open an issue in Github and include all logs that can be found in ``~/Library/Application Support/rotki/logs``.


Windows
==========

Go to the `releases <https://github.com/rotki/rotki/releases>`_ page and download the win32-x64 package from the `latest release <https://github.com/rotki/rotki/releases/latest>`_.

Unzip it in a folder of your choice. In the root directory of the unzipped archive there is a ``rotki`` executable. Double click it to start rotki.

Troubleshooting
---------------

If you get "The python backend crashed" or any other error please run the executable via the Command Prompt. Then provide us with the output that is visible in the prompt and this will help us debug your issue.

You should also include all logs that can be found in ``<WindowsDrive>:\Users\<User>\Roaming\rotki\logs\`` (``%APPDATA%\rotki\logs``).

Docker
================

Since v1.11.0 rotki provides official docker images of nightly versions
and releases.

   Versions up to v1.13.2 report a dev version instead of the actual
   release. This is due to an issue during the build process.

You can find all the available docker images at `DockerHub`_.

   !Warning: It is important to keep in mind that is advisable to run
   the docker image in a secure environment. Such an environment would
   be for example running the docker image in the host machine and
   accessing it only via NAT. Under no circumstances should you
   expose the docker image directly to public or local networks since
   this can lead to security issues and unauthorized access of your
   data.

You can get the latest version of rotki by pulling the ``latest`` tag.
This tag always points to the latest rotki release::

   docker pull rotki/rotki:latest

To start a container based on the latest rotki image you can run the
following::

   docker run -d --name rotki \
       -v $HOME/.rotki/data:/data \
       -v $HOME/.rotki/logs:/logs \
       rotki/rotki:latest

This will start a new container that stores the data and logs into a
``.rotki`` directory under the user’s home directory. You will be able
to find your account data (databases etc) under the ``.rotki/data``
directory.

At this point the rotki docker container should be running and you
should be able to access it via your browser. If you are not aware of
the docker container’s IP address you can run the following to find it::

   docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' rotki

The command above will return an IP address, e.g. ``172.17.0.2``. To
access the rotki frontend you just need to open your browser and go to
``http://172.17.0.2``. You should be able to see the rotki login screen.

Updating to a newer version
---------------------------

When a new rotki version is out there are few steps you need to follow
in order to upgrade to a newest version.

First you have to stop the rotki container from running::

   docker stop rotki

Then you need to remove the old container::

   docker rm rotki

Since your data are stored in volumes in the host machine, deleting the
container will not touch your data.

In order to update to the latest version you need to once again pull the
latest tag from docker hub::

   docker pull rotki/rotki:latest

After the latest image is properly updated on your machine you need to
create a new container::

   docker run -d --name rotki \
       -v $HOME/.rotki/data:/data \
       -v $HOME/.rotki/logs:/logs \
       rotki/rotki:latest

Please ensure that the volumes from the previous container are used
again. If you don’t use the same volumes, then your old accounts and
data will be unavailable.

.. _DockerHub: https://hub.docker.com/r/rotki/rotki/

Moving the accounts from the desktop application
-------------------------------------------------

If for any reason you would like to move your accounts from the rotki application to
docker you can do so by copying the data directory of the application to the docker
data volume.

You can find where the rotki application data is stored in the :ref:`rotki_data_directory`.

To move your existing accounts from the application, you can copy the contents of
the application data directory to the data volume mount point.

Assuming that you used the directory from the example, to move a specific account
on linux, you have to run::

    sudo cp -R ~/.local/share/rotki/data/username ~/.rotki/data/username

This will copy the ``username`` account to the data volume and make it accessible through
the docker container.

Troubleshooting
---------------

If you get a problem when starting the application or during its usage
please open an issue in Github and include all logs that can be found
in ``$HOME/.rotki/logs:/logs`` or the custom volume you used during
the container creation.

Building from source
******************

Linux
=========

Make sure you have `python <https://www.python.org/downloads/release/python-374/>`_ (version >=3.7, <3.10). Check your python version with ``python --version``.
Make sure you have `pip <https://pip.pypa.io/en/stable/installing/>`_ (Python package manager). Check your pip version with ``pip --version``.
Make sure you have `virtualenv <https://virtualenv.pypa.io/en/latest/installation.html>`_ and `virtualenvwrapper <https://virtualenvwrapper.readthedocs.io/en/latest/>`_. For installing these see `here <http://docs.python-guide.org/en/latest/dev/virtualenvs/>`__.
Make sure you have some system packages for various dependencies. For Debian/Ubuntu based systems this should be enough::

    sudo apt-get install -y build-essential automake pkg-config libtool libffi-dev libgmp-dev libssl-dev

  For other Linux distros or OSX try and search for your specific distribution's package manager equivalent.

Create a new `virtual environment <http://docs.python-guide.org/en/latest/dev/virtualenvs/>`_ to install all the python dependencies. If you don't have ``mkvirtualenv`` then check how to get it depending on your distribution. `Here <http://exponential.io/blog/2015/02/10/install-virtualenv-and-virtualenvwrapper-on-ubuntu/>`__ is a guide for Ubuntu and `here <https://wiki.archlinux.org/index.php/Python/Virtual_environment>`__ is one for ArchLinux::

    mkvirtualenv rotki

Then install all the python requirements by doing::

    pip install -e .

To start the backend service, ensure your virtual environment is activated and run::

    python -m rotkehlchen

This will start the Rotki backend API server. You can then interact with it using API calls.


OSX
=====

The tl;dr version is:
- install sqlcipher
- use a virtual env with python 3.7.x
- make sure pip installed everything it says it installed
- get your node under control with nvm. It has been tested with v12.18.0

The following recipe has been tested using `Anaconda <https://conda.io>`_. `VirtualEnv <https://virtualenv.pypa.io>`_ works as well, refer to the documentations of those projects to install and use them.

Rotki uses an encrypted database called `SQLCipher <https://www.zetetic.net/sqlcipher/>`_. Before we can proceed, we need to install it. Homebrew makes it simple::

    $ brew update && brew install sqlcipher

Also these are some dependencies that may or may not be properly installed in your system so make sure you have them. ::

    $ brew install gmp

If you wish to use Conda, use the following commands::

    $ brew cask install caskroom/cask/anaconda
    $ echo "export PATH=$PATH:/usr/local/anaconda3/bin" >> ~/.bash_profile
    $ echo ". /usr/local/anaconda3/etc/profile.d/conda.sh" >> ~/.bash_profile
    $ source ~/.bash_profile
    $ conda create python=3.7 --name rotki
    $ conda activate rotki

If you wish to use Virtualenvwrapper use the following::

    $ pip install virtualenv
    $ pip install virtualenvwrapper

And add the following to your shell startup file, assuming virtualenvwrapper was installed in ``/usr/local/bin``::

    export WORKON_HOME=$HOME/.virtualenvs
    export PROJECT_HOME=$HOME/Devel
    source /usr/local/bin/virtualenvwrapper.sh

Before using `pip`, let´s ensure we have the latest version::

    $ pip install --upgrade pip

Install all the requirements::

    $ sudo pip install -r requirements.txt

If you want to also have the developer requirements in order to develop rotki
then do::

    $ pip install -r requirements_dev.txt

.. NOTE::
   Make sure that pysqlcipher3 is properly installed. If ``$ pip freeze | grep pysqlcipher3`` returns nothing for you then it was not installed. Try to manually install only that dependency with the verbose option to see where it fails. ``$ pip install pysqlcipher3 -v``. If it fails at the stage of finding the library for ``-lsqlcipher`` then ``brew install sqlciper`` did not place the installed lib directory to the ``LIBRARY_PATH`` and you will have to do it manually. For example if ``sqlcipher`` was installed at ``/usr/local/Cellar/sqlcipher/3.4.2/`` then use pip install this way:
     ``$ LIBRARY_PATH=/usr/local/Cellar/sqlcipher/3.4.2/lib pip install pysqlcipher3``.

Since the electron application is located in a different directory you also need to do::

    pip install -e .

To start the backend service, ensure your virtual environment is activated and run::

    python -m rotkehlchen

This will start the Rotki backend API server. You can then interact with it using API calls.


Windows
==========

This is a guide on how to set up a rotki development environment in Windows from source.

Dependencies
-------------

Python
^^^^^^^^^^^^^^^^^^^^

1. Get `python 3.7 <https://www.python.org/downloads/release/python-374/>`_ (3.7 is required due to some rotki dependencies). Make sure to download the 64-bit version of python if your version of Windows is 64-bit! If you're unsure of what Windows version you have, you can check in Control Panel -> System and Security -> System.
2. For some reason python does not always install to the Path variable in Windows. To ensure you have the necessary python directories referenced, go to Control Panel -> System -> Advanced system settings -> Advanced (tab) -> Environment Variables... In the Environment Variables... dialog under "System Varaiables" open the "Path" variable and ensure that both the root python directory as well as the ``\Scripts\`` subdirectory are included. If they are not, add them one by one by clicking "New" and then "Browse" and locating the correct directories. NOTE: By default the Windows MSI installer place python in the ``C:\Users\<username>\AppData\Local\Programs\`` directory.
3. To test if you have entered python correctly into the Path variable, open a command prompt and type in ``python`` then hit Enter. The python cli should run and you should see the python version you installed depicted above the prompt. Press CTRL+Z, then Enter to exit.

    .. NOTE::
        For some reason in newer versions of Windows typing "python" will actually open the Windows Store -- you can fix this by opening "App execution aliases" (search for it via the Windows Search) and toggling off the aliases for python.exe and python3.exe.

4. Make sure you have `pip installed <https://pip.pypa.io/en/stable/installing/#do-i-need-to-install-pip>`_. If your Path environment variable is correctly set up, you can type ``pip -V`` into a command prompt to check (it should return the version of the installed pip).
5. Make sure you have the latest version of pip installed by executing::

    pip install --upgrade pip

6. Using pip, install virtualenvironment and the virtualenvwrapper-win. `See instructions here for installing them on Windows <http://timmyreilly.azurewebsites.net/python-pip-virtualenv-installation-on-windows/>`_. You can choose to follow the rest of the guide as an example or just read the instructions.
7. Lastly, make sure you have the Microsoft Visual Studio build tools. Check the troubleshooting guide's relevant section :ref:`microsoft_visual_studio_build_tools_required`.

Set up rotki dev environment
----------------------------

Downloading source and installing python dependencies
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This guide will assume that you want to use git to clone the project into a development directory; if you wish to just download the source from Github as a zip you can do that instead (the zip file has everything in a folder in the format of ``<project>-<branch>``, so if you download rotki/develop you will get a folder ``rotki-develop``; you can of course rename this). If you download the source as a zip you can skip to Step 4 below.

1. Fork the relevant rotki branch into your own account in github.

2. Open a terminal (command prompt / PowerShell prompt / etc.) in your root development directory (the parent directory of where you will place your rotki development directory).

3. Clone your forked project into the local directory where you want to build rotki (e.g. if you forked the rokti/develop branch you might clone into ``c:\dev\rotki-develop``).

At this point in your local rotki development directory you should have all the same files as they appear in the github page for the rotki branch you chose to download/clone.

Going back to your open terminal, it's time to set up your python virtual environment (virtualenv).

4. Recalling the instructions above on how to set up the virtualenv, set one up for rotki (you don't have to use the name ``rotki-develop``)::

    mkvirtualenv rotki-develop

5. Ensure that you're in the directory where you downloaded/cloned the rotki source and bind the virtualenv to the directory::

    setprojectdir .

If at any time you want to dissasociate with the virtual env, you can use the command ``deactivate``. Whenever you open a new terminal you can now use ``workon rotki-develop`` (if you named your virtualenv something else then use that instead of ``rotki-develop``) and it should establish the link to the python virtualenv you created and set your working directory to the directory you were in in Step 5. Following the example above, if you open a brand new terminal and type in ``workon rotki-develop`` your terminal prompt should look something like::

    (rotki-develop) c:\dev\rotki-develop>

6. Now it's time to install all the python requirements. In the open terminal with your virtualenv activated, execute::

    pip install -e .

To start the backend service, ensure your virtual environment is activated and from the root `rotki` directory, run::

    python -m rotkehlchen

This will start the Rotki backend API server. You can then interact with it using API calls.


Troubleshooting
---------------

anyapi-ms-win-crt-runtime missing
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If you get ``anyapi-ms-win-crt-runtime-l1-1-0.dll is missing`` error when running python follow `this <https://www.ghacks.net/2017/06/06/the-program-cant-start-because-api-ms-win-crt-runtime-l1-1-0-dll-is-missing/>`__ guide to resolve it.

.. _microsoft_visual_studio_build_tools_required:

Microsoft Visual C++ 14.0 is required
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If you get::

    building 'gevent.libev.corecext' extension
    error: Microsoft Visual C++ 14.0 is required. Get it with "Microsoft Visual C++ Build Tools": https://visualstudio.microsoft.com/downloads/


Then go `here <https://visualstudio.microsoft.com/downloads/>`__ and get the microsoft visual studio build tools and install them. The specific parts of the tools that need to be installed can be seen in `this SO answer <https://stackoverflow.com/questions/29846087/microsoft-visual-c-14-0-is-required-unable-to-find-vcvarsall-bat/49986365#49986365>`__.

You also need to add them to the path. The tools were probably installed here: ``C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\Common7\Tools``
Environment variable should be: ``VS140COMNTOOLS``


Alternative dependencies with sqlciper amalgamation
-------------------------------------------------------------

This is a not so well tested way but some work has been done by cryptomental in `this <https://github.com/rotki/rotki/issues/28>`__ issue for it. With the amalgamation you can obtain all sqlcipher dependencies precompiled and amalgamated in one big blog. But ... it's tricky, hense not so well tested.

Read the issue for a lot of details and also the ``appveyor.yml`` for what needs to be done to build sqlcipher and keep the following in mind:

1. Replace ``robocopy`` with ``copy -r`` and make sure to copy into python system include and not the venv one.
2. If while building the amalgamation you get: ``"Fatal error: OpenSSL could not be detected!"`` try `this SO answer <https://stackoverflow.com/a/38969408>`__. and make sure to add ``OPENSSL_CONF`` to the environment variables pointing to the location of ``openssl.conf``.
3. In addition copy the amalgamation dir's ssl include folder to the python include folder::

       $ cp -r sqlcipher-amalgamation-3020001/openssl-include/openssl/ /c/Users/lefteris/AppData/Local/Programs/Python/Python37-32/include/openssl

4. Copy the amalgamation dir's ssl libraries to the python lib folder::

       $ cp sqlcipher-amalgamation-3020001/OpenSSL-Win32/* /c/Users/lefteris/AppData/Local/Programs/Python/Python37-32/libs/

   Note it has to be the OpenSSL-Win32 part.

.. _rotki_data_directory:

Rotki Data Directory
{{ ... }}
